#!/bin/bash

#set -eo pipefail

POSTGRES_USER=${POSTGRES_USER:-"docker"}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-"docker"}
POSTGRES_DB=${POSTGRES_DB:-"docker"}
POSTGRES_AUTH_METHOD=${POSTGRES_AUTH_METHOD:-"md5"}

function init_postgres_database 
{
    echo "INITIALISING DATABASE"
    sudo -u postgres ${PG_BIN}/pg_ctl -D ${PG_DBDIR} initdb
}


function start_postgres 
{
    sudo -u postgres ${PG_BIN}/pg_ctl -D ${PG_DBDIR} start -w
}


function stop_postgres 
{
    sudo -u postgres ${PG_BIN}/pg_ctl -D ${PG_DBDIR} stop -w
}


function set_password_for_auth_method 
{
    # Only supporting 'password' or 'md5' so far...
    AUTH_PASS="PASSWORD $POSTGRES_PASSWORD"
    if [ $POSTGRES_AUTH_METHOD == "md5" ]
    then
        MD5=`echo -n $POSTGRES_PASSWORD$POSTGRES_USER | md5sum | cut -d' ' -f1`
        AUTH_PASS="ENCRYPTED PASSWORD 'md5$MD5'"
    fi
}


function create_user 
{
    if [ ! -z $POSTGRES_USER ] && [ ! -z $POSTGRES_PASSWORD ]
    then
        start_postgres
        set_password_for_auth_method
        psql --command="CREATE ROLE $POSTGRES_USER WITH $AUTH_PASS SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;" --dbname=postgres
        stop_postgres
    else
        echo "WARNING: Missing user credentials"
    fi
}


function create_db 
{
    if [ ! -z $POSTGRES_DB ]
    then
        start_postgres
        psql --command="CREATE DATABASE $POSTGRES_DB WITH OWNER = $POSTGRES_USER TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'ru_RU.UTF-8' LC_CTYPE = 'ru_RU.UTF-8';"
        stop_postgres
    else
        echo "WARNING: Missing database name"
    fi
}


function edit_postgresql_conf 
{
    sed -i \
        -e "s/^#listen_addresses = 'localhost'/listen_addresses = '*'/" \
        -e "s|^#log_directory = 'log'|log_directory = '${LOG_DIR}'|" \
        -e "s/^#log_file_mode = 0600/log_file_mode = 0666/" \
        ${PG_DBDIR}/postgresql.conf
}


function configure_client_authentication 
{
    # This involves editing the pg_hba.conf file to determine
    #   . Who can login
    #   . Where they can login from
    #   . What the method of authentication should be
    #
    # See https://www.postgresql.org/docs/10/static/auth-pg-hba-conf.html for detail

    sed -i \
        -e "s/^\(local *all *all *\).*/\1 ${POSTGRES_AUTH_METHOD}/" \
        -e "s|^\(host *all *all *\)127.*|\1 0.0.0.0/0            ${POSTGRES_AUTH_METHOD}|" \
        -e "s|^\(host *all *all *\)::1.*|\1 ::0/0            ${POSTGRES_AUTH_METHOD}|" \
        ${PG_DBDIR}/pg_hba.conf
}


function first_time 
{
    DBDIR_EXISTS="false"
    if [ -d ${PG_DBDIR} ]
    then
        DBDIR_EXISTS="true"
        DB_PRIMED="false"
        # If any of these files exist then step away
        for GENFILE in postgresql.conf pg_hba.conf pg_ident.conf
        do
            test -f ${PG_DBDIR}/${GENFILE}
            if [ $? -eq 0 ]
            then
                DB_PRIMED="true"
                break
            fi
        done

        if [ $DB_PRIMED == "false" ]
        then
            echo "WARNING: Seemingly unprimed database detected. Replacing."
            mv ${PG_DBDIR} ${PG_DBDIR}.$(date +%Y%m%d-%H%M)
            DBDIR_EXISTS="false"
        fi
    fi

    if [ $DBDIR_EXISTS == "false" ]
    then
        init_postgres_database
        create_user
        create_db
        #edit_postgresql_conf
        #configure_client_authentication
    fi
}


function remove_old_postmaster_pid 
{
    if [ -f ${PG_DBDIR}/postmaster.pid ]
    then
        echo "Removing old postmaster.pid"
        rm -f ${PG_DBDIR}/postmaster.pid
    fi
}

first_time
#chmod -R 700 ${PG_DBDIR}
#remove_old_postmaster_pid
